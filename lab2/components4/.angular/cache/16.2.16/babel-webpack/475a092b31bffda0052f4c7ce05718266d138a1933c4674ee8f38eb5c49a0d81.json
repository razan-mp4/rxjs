{"ast":null,"code":"import { FormsModule } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nlet ChildComponent = /*#__PURE__*/(() => {\n  class ChildComponent {\n    // Input property to accept a value for 'name' from the parent component\n    name = \"\"; // Default value is an empty string\n    // Constructor: Called when the component is created, but before Angular sets its inputs or initializes it\n    constructor() {\n      this.log(`constructor`); // Logs a message indicating that the constructor has been called\n    }\n    // Lifecycle hook: Called once after the component is initialized\n    ngOnInit() {\n      this.log(`onInit`); // Logs a message indicating that the component has been initialized\n    }\n    // Lifecycle hook: Called whenever an input property changes\n    ngOnChanges(changes) {\n      // Iterates through all changed properties\n      for (let propName in changes) {\n        let chng = changes[propName]; // Gets the change object for the property\n        let cur = JSON.stringify(chng.currentValue); // Current value of the property\n        let prev = JSON.stringify(chng.previousValue); // Previous value of the property\n        // Logs the property name and its previous and current values\n        this.log(`${propName}: currentValue = ${cur}, previousValue = ${prev}`);\n      }\n    }\n    // Private method to log messages to the console\n    log(msg) {\n      console.log(msg); // Outputs the log message to the browser console\n    }\n\n    static ɵfac = function ChildComponent_Factory(t) {\n      return new (t || ChildComponent)();\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ChildComponent,\n      selectors: [[\"child-comp\"]],\n      inputs: {\n        name: \"name\"\n      },\n      standalone: true,\n      features: [i0.ɵɵNgOnChangesFeature, i0.ɵɵStandaloneFeature],\n      decls: 2,\n      vars: 1,\n      template: function ChildComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"p\");\n          i0.ɵɵtext(1);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵtextInterpolate1(\"\\u041F\\u0440\\u0438\\u0432\\u0456\\u0442 \", ctx.name, \"\");\n        }\n      },\n      dependencies: [FormsModule],\n      encapsulation: 2\n    });\n  }\n  return ChildComponent;\n})();\nexport { ChildComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}